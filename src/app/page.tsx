'use client';
import { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import { FaDocker, FaGithub, FaFileAlt, FaMagic, FaShieldAlt, FaRegFileCode } from 'react-icons/fa';
import { MdOutlineDescription, MdOutlineFileDownload } from 'react-icons/md';
import { ImSpinner2 } from 'react-icons/im';
import FeatureHighlights from '@/components/FeatureHighlights';
import HeroSection from '@/components/HeroSection';


const SERVICE_META = {
  'review-dockerfile': {
    icon: <FaDocker className="text-blue-500 text-2xl" />,
    title: 'Review Dockerfile',
    desc: 'Get an expert review and suggestions for your Dockerfile.',
  },
  'generate-dockerfile': {
    icon: <FaMagic className="text-purple-500 text-2xl" />,
    title: 'Generate Dockerfile',
    desc: 'AI generates a production-ready Dockerfile for your project.',
  },
  'review-workflow': {
    icon: <FaGithub className="text-gray-500 text-2xl" />,
    title: 'Review Workflow',
    desc: 'Review your GitHub Actions workflow for best practices.',
  },
  'generate-workflow': {
    icon: <FaMagic className="text-pink-500 text-2xl" />,
    title: 'Generate Workflow',
    desc: 'AI creates a CI/CD workflow tailored to your codebase.',
  },
  'security-audit': {
    icon: <FaShieldAlt className="text-red-500 text-2xl" />,
    title: 'Security Audit',
    desc: 'Automated security analysis and recommendations.',
  },
  'generate-docs': {
    icon: <MdOutlineDescription className="text-green-500 text-2xl" />,
    title: 'Generate Docs',
    desc: 'AI generates a professional README or documentation.',
  },
  'explain-dockerfile': {
    icon: <FaRegFileCode className="text-blue-500 text-2xl" />,
    title: 'Explain Dockerfile',
    desc: 'Understand what your Dockerfile does, in plain English.',
  },
  'explain-workflow': {
    icon: <FaRegFileCode className="text-purple-500 text-2xl" />,
    title: 'Explain Workflow',
    desc: 'Get a human-friendly explanation of your workflow file.',
  },
};

export default function Home() {
  const [repo, setRepo] = useState('');
  const [analysis, setAnalysis] = useState(null);
  const [services, setServices] = useState([]);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const [prUrl, setPrUrl] = useState(null);
  const [prLoading, setPrLoading] = useState(false);
  const [lastGenFile, setLastGenFile] = useState<{ path: string, content: string } | null>(null);
  const [serviceLoading, setServiceLoading] = useState<string | null>(null);

  const handleDownloadFile = () => {
    if (!lastGenFile) return;
    const blob = new Blob([lastGenFile.content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = lastGenFile.path;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleCreatePR = async () => {
    if (!lastGenFile) return;
    setPrLoading(true);
    setPrUrl(null);
    setError(null);
    try {
      const res = await fetch('/api/create-pr', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          repoUrl: repo,
          filePath: lastGenFile.path,
          fileContent: lastGenFile.content,
          prTitle: `Add AI-generated ${lastGenFile.path}`,
          prBody: `This file (${lastGenFile.path}) was generated by the AI DevOps Agent.`,
        }),
      });
      const data = await res.json();
      if (data.prUrl) {
        setPrUrl(data.prUrl);
      } else {
        setError(data.error || 'Failed to create PR.');
      }
    } catch (err) {
      setError('Failed to create PR.');
    }
    setPrLoading(false);
  };

  const handleAnalyze = async () => {
    setLoading(true);
    setError(null);
    setAnalysis(null);
    setServices([]);
    setResult(null);
    setLastGenFile(null);
    setPrUrl(null);
    try {
      const res = await fetch('/api/analyze-repo', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ repo }),
      });
      const data = await res.json();
      if (data.error) throw new Error(data.error);
      setAnalysis(data);
      setServices(data.services || []);
    } catch (err) {
      setError(err.message || 'Failed to analyze repo.');
    }
    setLoading(false);
  };

  const handleService = async (service) => {
    setServiceLoading(service);
    setResult(null);
    setError(null);
    setLastGenFile(null);
    setPrUrl(null);
    let endpoint = '';
    let body = {};
    let filePath = '';
    let fileContent = '';

    switch (service) {
      case 'review-dockerfile':
        endpoint = '/api/review-dockerfile';
        body = { dockerfileContent: analysis.dockerfileContent };
        break;
      case 'generate-dockerfile':
        endpoint = '/api/generate-dockerfile';
        body = { repo };
        filePath = 'Dockerfile';
        break;
      case 'review-workflow':
        endpoint = '/api/review-workflow';
        const workflowFile = analysis.fileTree.find(f => f.startsWith('.github/workflows/'));
        const workflowRes = await fetch(`/api/fetch-file`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ repo, path: workflowFile }),
        });
        const workflowData = await workflowRes.json();
        body = { workflowContent: workflowData.content };
        break;
      case 'generate-workflow':
        endpoint = '/api/generate-workflow';
        body = { repo };
        filePath = '.github/workflows/ci.yml';
        break;
      case 'security-audit':
        endpoint = '/api/security-audit';
        body = { analysis };
        break;
      case 'generate-docs':
        endpoint = '/api/generate-docs';
        body = { analysis };
        filePath = 'README.md';
        break;
      case 'explain-dockerfile':
        endpoint = '/api/explain-file';
        body = { fileContent: analysis.dockerfileContent, fileType: 'Dockerfile' };
        break;
      case 'explain-workflow':
        endpoint = '/api/explain-file';
        const wfFile = analysis.fileTree.find(f => f.startsWith('.github/workflows/'));
        const wfRes = await fetch(`/api/fetch-file`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ repo, path: wfFile }),
        });
        const wfData = await wfRes.json();
        body = { fileContent: wfData.content, fileType: 'GitHub Actions Workflow' };
        break;
      default:
        setError('Unknown service');
        setServiceLoading(null);
        return;
    }

    try {
      const res = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });
      const data = await res.json();
      setResult(data);

      if (['generate-dockerfile', 'generate-workflow', 'generate-docs'].includes(service)) {
        fileContent =
          typeof data === 'string'
            ? data
            : Object.values(data || {}).find(v => typeof v === 'string') ||
              JSON.stringify(data, null, 2);
        setLastGenFile({ path: filePath, content: fileContent });
      } else {
        setLastGenFile(null);
      }
    } catch (err) {
      setError('Failed to run service.');
    }
    setServiceLoading(null);
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      
      <header className="flex items-center justify-between px-8 py-6 border-b border-gray-200 bg-white">
        <div className="flex items-center gap-3">
          <FaMagic className="text-3xl text-lime-500" />
          <span className="font-extrabold text-2xl text-gray-900 tracking-tight">CodeFlow AI</span>
        </div>
       
      </header>

      
      <main className="flex flex-col items-center flex-1 w-full px-4 py-10">
       
      <HeroSection />
      
       
        <div className="flex flex-col sm:flex-row items-center gap-3 w-full max-w-xl mb-8">
          <input
            type="url"
            className="border border-gray-300 bg-white text-gray-800 placeholder-gray-400 rounded-lg p-3 w-full focus:outline-none focus:ring-2 focus:ring-lime-400"
            placeholder="Paste GitHub repo URL"
            value={repo}
            onChange={(e) => setRepo(e.target.value)}
            required
          />
          <button
            onClick={handleAnalyze}
            className="bg-lime-400 hover:bg-lime-500 text-gray-900 font-bold px-6 py-3 rounded-lg shadow transition flex items-center gap-2"
            disabled={loading || !repo}
          >
            {loading ? (
              <>
                <ImSpinner2 className="animate-spin" /> Analyzing...
              </>
            ) : 'Analyze'}
          </button>
        </div>
        {error && (
          <div className="bg-red-100 text-red-700 p-2 rounded mb-4 border border-red-200 w-full max-w-xl text-center">
            {error}
          </div>
        )}

       
        {services.length > 0 && (
          <div className="w-full max-w-3xl grid grid-cols-1 sm:grid-cols-2 gap-6 mb-10">
            {services.map(service => (
              <div
                key={service}
                className="bg-white border border-gray-200 rounded-2xl p-6 flex flex-col items-start shadow hover:shadow-lg transition"
              >
                <div className="mb-3">{SERVICE_META[service]?.icon || <FaMagic className="text-xl" />}</div>
                <div className="font-bold text-lg mb-1 text-gray-900">{SERVICE_META[service]?.title || service}</div>
                <div className="text-gray-500 mb-3 text-sm">{SERVICE_META[service]?.desc || ''}</div>
                <button
                  className="mt-auto bg-lime-400 hover:bg-lime-500 text-gray-900 font-bold px-4 py-2 rounded-lg shadow flex items-center gap-2 transition"
                  disabled={!!serviceLoading}
                  onClick={() => handleService(service)}
                >
                  {serviceLoading === service ? (
                    <>
                      <ImSpinner2 className="animate-spin" /> Running...
                    </>
                  ) : 'Run'}
                </button>
              </div>
            ))}
          </div>
        )}

        
        {result && (
          <div className="w-full max-w-2xl bg-white border border-gray-200 rounded-2xl p-6 shadow mb-8">
            <h2 className="font-semibold text-2xl mb-3 text-lime-500">Result</h2>
            <div className="bg-gray-50 rounded-lg p-4 mb-4 border border-gray-100 text-gray-800 font-mono text-sm whitespace-pre-wrap break-words">
              <ReactMarkdown>
                {
                  typeof result === 'string'
                    ? result
                    : Object.values(result || {}).find(v => typeof v === 'string') ||
                      JSON.stringify(result, null, 2)
                }
              </ReactMarkdown>
            </div>
            {lastGenFile && (
              <div className="flex items-center gap-3 mt-2">
                <button
                  onClick={handleCreatePR}
                  className="bg-lime-400 hover:bg-lime-500 text-gray-900 font-bold px-4 py-2 rounded-lg shadow"
                  disabled={prLoading}
                >
                  {prLoading ? (
                    <span className="flex items-center gap-2">
                      <ImSpinner2 className="animate-spin" /> Creating PR...
                    </span>
                  ) : (
                    `Generate Pull Request for ${lastGenFile.path}`
                  )}
                </button>
                <button
                  onClick={handleDownloadFile}
                  className="bg-gray-900 hover:bg-black text-white px-4 py-2 rounded-lg shadow flex items-center gap-2"
                >
                  <MdOutlineFileDownload className="text-xl" />
                  Download {lastGenFile.path}
                </button>
                {prUrl && (
                  <div className="ml-2">
                    <a href={prUrl} target="_blank" rel="noopener noreferrer" className="text-lime-600 underline font-semibold">
                      View Pull Request
                    </a>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
      
      </main>
      <FeatureHighlights/>
    </div>
  );
}
